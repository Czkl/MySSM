
#log4j.rootLogger=输出级别,输出目的地
#log4j.appender.输出目的地=文件输出目的地的值（下面有五种可选值）
#log4j.appender.输出目的地.输出目的地属性=输出目的地属性值（依据输出目的地有相应的属性值，在下面有展示）
#log4j.appender.输出目的地.layout = 输出目的地布局方式的值（下面有四种布局方式的可选值）
#log4j.appender.输出目的地.layout.属性名=属性值（依据每种布局方式有不同的可选值，常用文件格式在下面有标注）

#定义LOG输出级别
log4j.rootLogger=WARN,Console,File



#org.apache.log4j.ConsoleAppender（控制台_输出目的地的值）
#输出目的地拥有的属性值
#Threshold = WARN<INFO<DEBUG (WARN:指定日志消息的输出最低层次)
#ImmediateFlush = true (默认值是true,意谓着所有的消息都会被立即输出)
#Target = System.err (默认情况下是：System.out,指定输出控制台)

#定义日志输出目的地为控制台
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out


#文件输出目的地布局方式可选值：
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#   LocationInfo=true:默认值是false,输出java文件名称和行号
#   Title=my app file: 默认值是 Log4J Log Messages

#org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#   ConversionPattern=%m%n :指定怎样格式化指定的消息

#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）

#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

#   %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#   %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#   %r: 输出自应用启动到输出该log信息耗费的毫秒数
#   %c: 输出日志信息所属的类目，通常就是所在类的全名
#   %t: 输出产生该日志事件的线程名
#   %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#   %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#   %%: 输出一个"%"字符
#   %F: 输出日志消息产生时所在的文件名称
#   %L: 输出代码中的行号
#   %m: 输出代码中指定的消息,产生的日志具体信息
#   %n: 输出一个回车换行符

#可以灵活地指定日志输出格式，下面一行是指定具体的格式
log4j.appender.Console.layout = org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%p-[%d{yyyy-MM-dd}]: [%c] - %m%n

#文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.File = org.apache.log4j.RollingFileAppender
#指定输出目录
log4j.appender.File.File = logs/ssm.log
#定义文件最大大小
log4j.appender.File.MaxFileSize = 10MB
# 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.File.Threshold = ALL
log4j.appender.File.layout = org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n
###显示mybatis的SQL语句部分，类似于hibernate在控制台打印sql语句那部分

#mybatis显示SQL语句日志配置
#log4j.logger.org.mybatis=DEBUG
#ssm.mapper是你的dao接口所在的包名
log4j.logger.ssm.dao=DEBUG

